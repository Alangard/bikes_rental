stages:
  - build
  - test
  - release
  - deploy

variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_STORAGE_BUCKET_NAME: $AWS_STORAGE_BUCKET_NAME

build-job:
  stage: build
  script:
    - docker-compose -f docker-compose.dev.yml build
  artifacts:
    paths:
      - docker-compose.dev.yml
      - docker-compose.testing.yml
      - docker-compose.prod.yml

test-job:
  stage: test
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DEBUG: 1
    PROD: 0
    DEV: 0
    TEST: 1
    ALLOWED_HOSTS: $ALLOWED_HOSTS
    REDIS_URL: $REDIS_URL
    CELERY_BROKER_URL: $CELERY_BROKER_URL
    CELERY_RESULT_BACKEND: $CELERY_BROKER_URL
    SECRET_KEY: $SECRET_KEY
  script:
    - docker-compose -f docker-compose.testing.yml up -d
    - docker exec -it DjangoAPI pytest
    - docker-compose -f docker-compose.testing.yml down
  dependencies:
    - build-job

release-job:
  stage: release
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -f docker-compose.prod.yml build
    - docker tag bikes_rental_prod $CONTAINER_IMAGE
    - docker push $CONTAINER_IMAGE
  after_script:
    - docker logout

deploy-job:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $DOMAIN_NAME >> ~/.ssh/known_hosts
  script:
    - ssh -i ~/.ssh/id_rsa $SERVER_USERNAME@$DOMAIN_NAME "
        export DEBUG=0 &&
        export PROD=1 &&
        export DEV=0 &&
        export DEBUG=0 &&
        export TEST=0 &&
        export POSTGRES_ENGINE=$POSTGRES_ENGINE &&
        export POSTGRES_NAME=$POSTGRES_NAME &&
        export POSTGRES_USER=$POSTGRES_USER &&
        export POSTGRES_PASSWORD=$POSTGRES_PASSWORD &&
        export POSTGRES_HOST=$POSTGRES_HOST &&
        export POSTGRES_PORT=$POSTGRES_PORT &&
        export ALLOWED_HOSTS=$ALLOWED_HOSTS &&
        export REDIS_URL=$REDIS_URL &&
        export CELERY_BROKER_URL=$CELERY_BROKER_URL &&
        export CELERY_RESULT_BACKEND=$CELERY_RESULT_BACKEND &&
        export SECRET_KEY=$SECRET_KEY &&
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID &&
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY &&
        export AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME &&

        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker pull $CONTAINER_IMAGE &&
        docker-compose -f /path/to/docker-compose.prod.yml up -d"
  only:
    - main

